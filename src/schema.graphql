input SignUpInput {
    email: String!
    password: String!
    name: String!
}

input SignInInput {
    email: String!
    password: String!
}

type Mutation{
    signUp(input: SignUpInput!): Auth!
    signIn(input: SignInInput!): Auth!

    createTasksList(recap: String): TasksList!
    updateTasksList(id: ID!, recap: String): TasksList!
    deleteTasksList(id: ID!): Boolean! #return if successfully deleted
    addTasksListUser(tasksListID: ID!, userEmail: String!): TasksList #add other users

    createTask(title: String!, date: String!, deadline: String, note: String, tasksListID: ID!): Task!
    updateTask(id: ID!, title: String, date:String, deadline: String, note: String, isCompleted: Boolean): Task!
    deleteTask(id: ID!): Boolean! #return if successfully deleted
}

type Auth {
    user: User!
    token: String!
}

type User {
    id: ID!
    name: String!
    email: String!
}

type TasksList {
    id: ID!
    recap: String
    progress: Float!
    access:[User!]!
    tasks: [Task!]!
    owner: User!
}

type Task {
    id: ID!
    date: String!
    title: String!
    deadline: String
    note: String
    isCompleted: Boolean!
    tasksList: TasksList!
}

type SubmitStat {
    difficulty: String,
    count: Int,
    submissions: Int
}

type SubmitCal{
    timestamp: String,
    questionNum: Int
}

type LCData {
    username: String
    submissionCalendar:String
    submitStats: [SubmitStat]
}

type Query {
    myTasksList: TasksList!
    getTasksList(id: ID!): TasksList
    getUser(id: ID!): User
    getAccessTasksList: [TasksList]
    getLCData(username: String!):LCData!
}